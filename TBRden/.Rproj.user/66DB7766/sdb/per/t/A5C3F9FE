{
    "collab_server" : "",
    "contents" : "#!/usr/bin/env R\n\n#Copyright (c) 2016 Ryan Collins and Jake Conway\n#Distributed under terms of the MIT License\n\n#annoBurden: permutation testing for enrichment of annotations\n# versus a specific subset of bins (e.g. those passing TBRden permutation\n# for a significant case:control enrichment of CNVs)\n\nannoBurden <- function(anno,             #Path to TBRden_pileup.sh output for the control group. BED format required\n                       testBins,         #Path to TBRden_pileup.sh output for the comparison group. BED format required\n                       perm=10000,       #Number of permutations\n                       measure=\"mean\",   #Measurement to use (options: mean, count; count computes only 0 | non-0)\n                       alt=\"greater\",    #Alternative hypothesis: test bins are (greater|less) than random. Two-tailed test: two.sided\n                       column=5,         #Specify which column in df anno contains the annotation variable\n                       plot=F,           #Option to generate barplot on output\n                       OUTDIR=NULL,      #Output directory for writing results\n                       prefix=\"TBRden\"   #Prefix to be appended to results and plot (if optioned)\n){\n  #Sanity check input files\n  if(!(file.exists(anno))){\n    stop(paste(\"Input file \",anno,\" does not exist.\",sep=\"\"))\n  }\n  if(!(file.exists(testBins))){\n    stop(paste(\"Input file \",testBins,\" does not exist.\",sep=\"\"))\n  }\n\n  #Sanity check arguments\n  if(!(measure %in% c(\"mean\",\"count\"))){\n    stop(\"Argument 'measure' must be either 'mean' or 'count'\")\n  }\n\n  #Load library\n  require(plotrix)\n\n  #Read data\n  anno <- read.table(anno,header=F,sep=\"\\t\")\n  bins <- read.table(testBins,header=F,sep=\"\\t\")[,1:3]\n\n  #Get annotation values corresponding to test bins\n  anno.t <- merge(anno,bins,by=1:3,sort=F)\n\n  #Sanity check to ensure the number of test bins matches number of test annotation bins\n  if(nrow(anno.t) != nrow(bins)){\n    warning(paste(\"Annotation bins do not match all test bins; only \",nrow(anno.t),\n                  \" of \",nrow(bins),\" matched\",sep=\"\"))\n  }\n\n  #Slice annotation vector for test bins\n  anno.t <- anno.t[,column]\n\n  #Compute baseline statistics\n  if(measure==\"mean\"){\n    #Run t-test against background of all possible bins\n    base <- t.test(anno.t,anno[,column],alternative=alt)\n  }else{\n    #Run binomial test against background of all possible bins\n    x <- data.frame(\"nonzero\"=c(length(which(anno.t>0)),\n                                length(which(anno[,column]>0))),\n                    \"zero\"=c(length(which(anno.t==0)),\n                             length(which(anno[,column]==0))))\n    base <- binom.test(x=x[1,1],\n                       n=sum(x[1,]),\n                       p=x[2,1]/sum(x[2,]),\n                       alternative=alt)\n  }\n\n  #Apply over number of permutations\n  res <- as.data.frame(t(sapply(1:perm,function(i){\n    #Sample set of bins of same length as anno.t\n    sim <- anno[sample(x=1:nrow(anno),size=length(anno.t),replace=F),column]\n\n    #Perform either two-sample t-test or binomial test depending on specifications\n    if(measure==\"mean\"){\n      #Run t-test\n      res <- t.test(sim,anno[,column],alternative=alt)\n\n      #Return p-value & estimated mean\n      return(c(res$p.value,res$estimate[1]))\n\n    }else{\n      #Build df of zero/nonzero bins\n      x <- data.frame(\"nonzero\"=c(length(which(sim>0)),\n                                  length(which(anno[,column]>0))),\n                      \"zero\"=c(length(which(sim==0)),\n                               length(which(anno[,column]==0))))\n\n      #Run binomial test\n      res <- binom.test(x=x[1,1],\n                        n=sum(x[1,]),\n                        p=x[2,1]/sum(x[2,]),\n                        alternative=alt)\n\n      #Return p-value & estimated Bernoulli success rate\n      return(c(res$p.value,res$estimate))\n    }\n  })))\n\n  #Calculate empirical p-value & sampling distribution parameters\n  p.emp <- (length(which(res[,1]<=base$p.value))+1)/(perm+1)\n  est <- mean(res[,2])\n  std.err <- std.error(res[,2],na.rm=T)\n\n  #Barplot (if optioned)\n  if(plot==T){\n    if(measure==\"mean\"){\n      #Prep barplot\n      pdf(paste(OUTDIR,\"/\",prefix,\".permutations.pdf\",sep=\"\"),\n          height=6,width=2)\n      par(mar=c(0.6,4.1,0.6,0.6))\n      plot(x=c(0,2),y=c(0,1.2*max(est,base$estimate)),type=\"n\",\n           xaxs=\"i\",yaxs=\"i\",xlab=\"\",xaxt=\"n\",\n           ylab=\"Elements per Bin (Mean)\")\n      rect(xleft=par(\"usr\")[1],xright=par(\"usr\")[2],\n           ybottom=par(\"usr\")[3],ytop=par(\"usr\")[4],\n           border=NA,col=\"gray95\")\n      yticks=seq(0,ceiling(par(\"usr\")[4]),by=ceiling(par(\"usr\")[4]/7))\n      abline(h=yticks,lty=3)\n      #Plot bars\n      rect(xleft=0.2,xright=1,ybottom=0,ytop=base$estimate[1],\n           col=\"darkorange1\",border=\"darkorange3\")\n      rect(xleft=1,xright=1.8,ybottom=0,ytop=est,\n           col=\"dodgerblue3\",border=\"dodgerblue4\")\n      segments(x0=c(1.2,1.2,1.4),x1=c(1.6,1.6,1.4),\n               y0=c(est-2*std.err,est-2*std.err,est+2*std.err),\n               y1=c(est-2*std.err,est+2*std.err,est+2*std.err))\n      #Add labels\n      text(x=c(0.6,1.4),y=c(0,0),pos=3,labels=c(\"O\",\"P\"),font=2)\n      dev.off()\n\n    }else{\n      #Prep strip plot\n      pdf(paste(OUTDIR,\"/\",prefix,\".permutations.pdf\",sep=\"\"),\n          height=4,width=15)\n      h <- hist(res[,2],breaks=0:100/100,plot=F)\n      par(mar=c(3.1,4.1,0.6,0.6))\n      plot(x=c(0,1),y=c(0,1.05*max(h$counts)),type=\"n\",\n           xaxs=\"i\",yaxs=\"i\",xlab=\"\",ylab=\"\",xaxt=\"n\",yaxt=\"n\")\n      rect(xleft=par(\"usr\")[1],xright=base$estimate,\n           ybottom=par(\"usr\")[3],ytop=par(\"usr\")[4],\n           border=NA,col=adjustcolor(\"dodgerblue3\",alpha=0.3))\n      rect(xleft=base$estimate,xright=par(\"usr\")[2],\n           ybottom=par(\"usr\")[3],ytop=par(\"usr\")[4],\n           border=NA,col=adjustcolor(\"darkorange1\",alpha=0.3))\n      abline(v=seq(0,1,by=0.1),lty=3)\n      #Plot colored histogram\n      midpoints <- which(h$breaks==floor(100*base$estimate)/100 |\n                          h$breaks==ceiling(100*base$estimate)/100)\n      points.below <- which(h$breaks<=floor(100*base$estimate)/100)[-midpoints]\n      rect(xleft=h$breaks[points.below],xright=h$breaks[points.below+1],\n           ybottom=rep(0,times=length(points.below)),\n           ytop=h$counts[points.below],\n           col=\"dodgerblue3\",border=\"dodgerblue4\")\n      points.above <- which(h$breaks>=ceiling(100*base$estimate)/100)[-midpoints]\n      rect(xleft=h$breaks[points.above],xright=h$breaks[points.above+1],\n           ybottom=rep(0,times=length(points.above)),\n           ytop=h$counts[points.above],\n           col=\"darkorange1\",border=\"darkorange3\")\n      rect(xleft=h$breaks[min(midpoints)],xright=base$estimate,\n           ybottom=0,ytop=h$counts[min(midpoints)],\n           col=\"dodgerblue3\",border=\"dodgerblue4\")\n      rect(xleft=base$estimate,xright=h$breaks[max(midpoints)],\n           ybottom=0,ytop=h$counts[max(midpoints)],\n           col=\"darkorange1\",border=\"darkorange3\")\n      #Add marker & density curve\n      dens <- density(res[,2])\n      scaler <- max(h$counts)/max(dens$y)\n      points(x=dens$x,type=\"l\",y=scaler*dens$y)\n      abline(v=base$estimate,lwd=2)\n      #Add text\n      text(x=c(par(\"usr\")[1],par(\"usr\")[2]),\n           y=0.9*par(\"usr\")[4],\n           labels=c(\"Permutation Less Significant\\nThan Observed Value\",\n                    \"Permutation More Significant\\nThan Observed Value\"),\n           pos=c(4,2),font=4,\n           col=c(\"dodgerblue4\",\"darkorange3\"))\n      if(base$estimate>=0.5){\n        pos=2\n      }else{\n        pos=4\n      }\n      text(x=base$estimate,y=0.9*par(\"usr\")[4],\n           labels=\"Observed\\nValue\",pos=pos,font=4)\n      #Add axes & labels\n      axis(1,at=seq(0,1,0.2),labels=NA)\n      axis(1,at=seq(0,1,0.2),labels=paste(seq(0,100,20),\"%\",sep=\"\"),tick=F,line=-0.5)\n      axis(2,las=2,cex.axis=0.75)\n      mtext(1,text=\"Pct. of Bins with Element\",line=1.5)\n      mtext(2,text=\"Permutations (Count)\",line=2.5)\n      dev.off()\n    }\n  }\n\n  #Print results to file\n  if(measure==\"mean\"){\n    results <- data.frame(\"mean.obs\"=base$estimate[1],\n                          \"mean.perm\"=est,\n                          \"SEM.perm\"=std.err,\n                          \"p.perm\"=p.emp)\n  }else{\n    results <- data.frame(\"pct.obs\"=base$estimate[1],\n                          \"pct.perm\"=est,\n                          \"SEM.perm\"=std.err,\n                          \"p.perm\"=p.emp)\n  }\n  write.table(results,paste(OUTDIR,\"/\",prefix,\".annoBurden_results.txt\",sep=\"\"),\n              col.names=T,row.names=F,quote=F,sep=\"\\t\")\n}\n",
    "created" : 1481769855105.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2597098173",
    "id" : "A5C3F9FE",
    "lastKnownWriteTime" : 1481784265,
    "last_content_update" : 1481784265139,
    "path" : "~/Desktop/RCollins/HMS/Courses/HST508/HST508_FinalProject/HST508_FinalProject/TBRden/R/annoBurden.R",
    "project_path" : "R/annoBurden.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}