abline(v=log10(unlist(sapply(1:10,function(i){
return(c(c(1,5)*10^i))
}))),col="gray75")
abline(v=log10(unlist(sapply(1:10,function(i){
return(c(10^i))
}))),col="gray65")
axis(1,log10(unlist(sapply(1:10,function(i){
return(c(c(1:9)*10^i))
}))),labels=NA,col="gray65")
axis(1,log10(unlist(sapply(2:7,function(i){
return(c(10^i))
}))),labels=NA)
axis(1,log10(c(20000,50000,100000,500000,1000000,4000000)),tick=F,
line=-0.3,labels=c("20kb","50kb","100kb","500kb","1Mb","4Mb"),cex.axis=0.75)
mtext(1,line=1.75,text="Minimum CNV Size",cex=0.75)
abline(h=0:-4,lty=2,col="gray80")
axis(2,0:-4,labels=c("100%","10%","1%","0.1%","0.01%"),line=-0.8,las=2,tick=F,cex.axis=0.75)
mtext(2,line=2,text="Pct. of CNVs > Min. Size",cex=0.75)
mtext(3,line=0,text="Duplications (Noncoding)",font=2)
points(sizes,as.numeric(log10(nc[2,])),type="l",lwd=2)
points(sizes,as.numeric(log10(nc[2,])),cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(nc[4,])),type="l",col="#55db74",lwd=2)
points(sizes,as.numeric(log10(nc[4,])),col="#55db74",cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(nc[6,])),type="l",col="#5ebded",lwd=2)
points(sizes,as.numeric(log10(nc[6,])),col="#5ebded",cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(nc[8,])),type="l",col="#c470f4",lwd=2)
points(sizes,as.numeric(log10(nc[8,])),col="#c470f4",cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(nc[10,])),type="l",col="#fc3737",lwd=2)
points(sizes,as.numeric(log10(nc[10,])),col="#fc3737",cex=0.5,pch=21,bg="white")
#Legend
legend("bottomleft",legend=c("CTRL","DD","SCZ","DD+SCZ","CNCR"),cex=0.75,bg="white",
lwd=2,col=c("black","#55db74","#5ebded","#c470f4","#fc3737"))
dev.off()
#!/usr/bin/env R
#Code to plot number of CNVs reported per sample
WRKDIR <- "/Users/collins/Desktop/RCollins/HMS/Courses/HST508/HST508_FinalProject/HST508_FinalProject_Figures/"
#Load library
require(plotrix)
#Read data
all <- read.table(paste(WRKDIR,"../plot_data/CNV_size_bySize.all.txt",sep=""),header=F)[,3:23]
nc <- read.table(paste(WRKDIR,"../plot_data/CNV_size_bySize.noncoding.txt",sep=""),header=F)[,3:23]
#Set sizes vector
sizes <- log10(c(2:9,seq(10,90,10),seq(100,400,100))*10000)
#Prep plot
pdf(paste(WRKDIR,"CNVs_by_size.pdf",sep=""),height=6,width=7)
par(mfrow=c(2,2))
#All deletions
par(mar=c(3.1,3.1,1.1,1.1),bty="o")
plot(x=log10(c(20000,4000000)),y=c(0,-4),type="n",xaxs="i",yaxs="i",
xaxt="n",yaxt="n",xlab="",ylab="")
#Lines & axes
abline(v=log10(unlist(sapply(1:10,function(i){
return(c(c(1:9)*10^i))
}))),col="gray85")
abline(v=log10(unlist(sapply(1:10,function(i){
return(c(c(1,5)*10^i))
}))),col="gray75")
abline(v=log10(unlist(sapply(1:10,function(i){
return(c(10^i))
}))),col="gray65")
axis(1,log10(unlist(sapply(1:10,function(i){
return(c(c(1:9)*10^i))
}))),labels=NA,col="gray65")
axis(1,log10(unlist(sapply(2:7,function(i){
return(c(10^i))
}))),labels=NA)
axis(1,log10(c(20000,50000,100000,500000,1000000,4000000)),tick=F,
line=-0.3,labels=c("20kb","50kb","100kb","500kb","1Mb","4Mb"),cex.axis=0.75)
mtext(1,line=1.75,text="Minimum CNV Size",cex=0.75)
abline(h=0:-4,lty=2,col="gray80")
axis(2,0:-4,labels=c("100%","10%","1%","0.1%","0.01%"),line=-0.8,las=2,tick=F,cex.axis=0.75)
mtext(2,line=1.75,text="Pct. of CNVs > Min. Size",cex=0.75)
mtext(3,line=0,text="Deletions (All)",font=2)
points(sizes,as.numeric(log10(all[1,])),type="l",lwd=2)
points(sizes,as.numeric(log10(all[1,])),cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(all[3,])),type="l",col="#55db74",lwd=2)
points(sizes,as.numeric(log10(all[3,])),col="#55db74",cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(all[5,])),type="l",col="#5ebded",lwd=2)
points(sizes,as.numeric(log10(all[5,])),col="#5ebded",cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(all[7,])),type="l",col="#c470f4",lwd=2)
points(sizes,as.numeric(log10(all[7,])),col="#c470f4",cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(all[9,])),type="l",col="#fc3737",lwd=2)
points(sizes,as.numeric(log10(all[9,])),col="#fc3737",cex=0.5,pch=21,bg="white")
#Legend
legend("bottomleft",legend=c("CTRL","DD","SCZ","DD+SCZ","CNCR"),cex=0.75,bg="white",
lwd=2,col=c("black","#55db74","#5ebded","#c470f4","#fc3737"))
#All duplications
par(mar=c(3.1,3.1,1.1,1.1),bty="o")
plot(x=log10(c(20000,4000000)),y=c(0,-4),type="n",xaxs="i",yaxs="i",
xaxt="n",yaxt="n",xlab="",ylab="")
#Lines & axes
abline(v=log10(unlist(sapply(1:10,function(i){
return(c(c(1:9)*10^i))
}))),col="gray85")
abline(v=log10(unlist(sapply(1:10,function(i){
return(c(c(1,5)*10^i))
}))),col="gray75")
abline(v=log10(unlist(sapply(1:10,function(i){
return(c(10^i))
}))),col="gray65")
axis(1,log10(unlist(sapply(1:10,function(i){
return(c(c(1:9)*10^i))
}))),labels=NA,col="gray65")
axis(1,log10(unlist(sapply(2:7,function(i){
return(c(10^i))
}))),labels=NA)
axis(1,log10(c(20000,50000,100000,500000,1000000,4000000)),tick=F,
line=-0.3,labels=c("20kb","50kb","100kb","500kb","1Mb","4Mb"),cex.axis=0.75)
mtext(1,line=1.75,text="Minimum CNV Size",cex=0.75)
abline(h=0:-4,lty=2,col="gray80")
axis(2,0:-4,labels=c("100%","10%","1%","0.1%","0.01%"),line=-0.8,las=2,tick=F,cex.axis=0.75)
mtext(2,line=1.75,text="Pct. of CNVs > Min. Size",cex=0.75)
mtext(3,line=0,text="Duplications (All)",font=2)
points(sizes,as.numeric(log10(all[2,])),type="l",lwd=2)
points(sizes,as.numeric(log10(all[2,])),cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(all[4,])),type="l",col="#55db74",lwd=2)
points(sizes,as.numeric(log10(all[4,])),col="#55db74",cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(all[6,])),type="l",col="#5ebded",lwd=2)
points(sizes,as.numeric(log10(all[6,])),col="#5ebded",cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(all[8,])),type="l",col="#c470f4",lwd=2)
points(sizes,as.numeric(log10(all[8,])),col="#c470f4",cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(all[10,])),type="l",col="#fc3737",lwd=2)
points(sizes,as.numeric(log10(all[10,])),col="#fc3737",cex=0.5,pch=21,bg="white")
#Legend
legend("bottomleft",legend=c("CTRL","DD","SCZ","DD+SCZ","CNCR"),cex=0.75,bg="white",
lwd=2,col=c("black","#55db74","#5ebded","#c470f4","#fc3737"))
#NC deletions
par(mar=c(3.1,3.1,1.1,1.1),bty="o")
plot(x=log10(c(20000,4000000)),y=c(0,-4),type="n",xaxs="i",yaxs="i",
xaxt="n",yaxt="n",xlab="",ylab="")
#Lines & axes
abline(v=log10(unlist(sapply(1:10,function(i){
return(c(c(1:9)*10^i))
}))),col="gray85")
abline(v=log10(unlist(sapply(1:10,function(i){
return(c(c(1,5)*10^i))
}))),col="gray75")
abline(v=log10(unlist(sapply(1:10,function(i){
return(c(10^i))
}))),col="gray65")
axis(1,log10(unlist(sapply(1:10,function(i){
return(c(c(1:9)*10^i))
}))),labels=NA,col="gray65")
axis(1,log10(unlist(sapply(2:7,function(i){
return(c(10^i))
}))),labels=NA)
axis(1,log10(c(20000,50000,100000,500000,1000000,4000000)),tick=F,
line=-0.3,labels=c("20kb","50kb","100kb","500kb","1Mb","4Mb"),cex.axis=0.75)
mtext(1,line=1.75,text="Minimum CNV Size",cex=0.75)
abline(h=0:-4,lty=2,col="gray80")
axis(2,0:-4,labels=c("100%","10%","1%","0.1%","0.01%"),line=-0.8,las=2,tick=F,cex.axis=0.75)
mtext(2,line=1.75,text="Pct. of CNVs > Min. Size",cex=0.75)
mtext(3,line=0,text="Deletions (Noncoding)",font=2)
points(sizes,as.numeric(log10(nc[1,])),type="l",lwd=2)
points(sizes,as.numeric(log10(nc[1,])),cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(nc[3,])),type="l",col="#55db74",lwd=2)
points(sizes,as.numeric(log10(nc[3,])),col="#55db74",cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(nc[5,])),type="l",col="#5ebded",lwd=2)
points(sizes,as.numeric(log10(nc[5,])),col="#5ebded",cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(nc[7,])),type="l",col="#c470f4",lwd=2)
points(sizes,as.numeric(log10(nc[7,])),col="#c470f4",cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(nc[9,])),type="l",col="#fc3737",lwd=2)
points(sizes,as.numeric(log10(nc[9,])),col="#fc3737",cex=0.5,pch=21,bg="white")
#Legend
legend("bottomleft",legend=c("CTRL","DD","SCZ","DD+SCZ","CNCR"),cex=0.75,bg="white",
lwd=2,col=c("black","#55db74","#5ebded","#c470f4","#fc3737"))
#NC duplications
par(mar=c(3.1,3.1,1.1,1.1),bty="o")
plot(x=log10(c(20000,4000000)),y=c(0,-4),type="n",xaxs="i",yaxs="i",
xaxt="n",yaxt="n",xlab="",ylab="")
#Lines & axes
abline(v=log10(unlist(sapply(1:10,function(i){
return(c(c(1:9)*10^i))
}))),col="gray85")
abline(v=log10(unlist(sapply(1:10,function(i){
return(c(c(1,5)*10^i))
}))),col="gray75")
abline(v=log10(unlist(sapply(1:10,function(i){
return(c(10^i))
}))),col="gray65")
axis(1,log10(unlist(sapply(1:10,function(i){
return(c(c(1:9)*10^i))
}))),labels=NA,col="gray65")
axis(1,log10(unlist(sapply(2:7,function(i){
return(c(10^i))
}))),labels=NA)
axis(1,log10(c(20000,50000,100000,500000,1000000,4000000)),tick=F,
line=-0.3,labels=c("20kb","50kb","100kb","500kb","1Mb","4Mb"),cex.axis=0.75)
mtext(1,line=1.75,text="Minimum CNV Size",cex=0.75)
abline(h=0:-4,lty=2,col="gray80")
axis(2,0:-4,labels=c("100%","10%","1%","0.1%","0.01%"),line=-0.8,las=2,tick=F,cex.axis=0.75)
mtext(2,line=1.75,text="Pct. of CNVs > Min. Size",cex=0.75)
mtext(3,line=0,text="Duplications (Noncoding)",font=2)
points(sizes,as.numeric(log10(nc[2,])),type="l",lwd=2)
points(sizes,as.numeric(log10(nc[2,])),cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(nc[4,])),type="l",col="#55db74",lwd=2)
points(sizes,as.numeric(log10(nc[4,])),col="#55db74",cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(nc[6,])),type="l",col="#5ebded",lwd=2)
points(sizes,as.numeric(log10(nc[6,])),col="#5ebded",cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(nc[8,])),type="l",col="#c470f4",lwd=2)
points(sizes,as.numeric(log10(nc[8,])),col="#c470f4",cex=0.5,pch=21,bg="white")
points(sizes,as.numeric(log10(nc[10,])),type="l",col="#fc3737",lwd=2)
points(sizes,as.numeric(log10(nc[10,])),col="#fc3737",cex=0.5,pch=21,bg="white")
#Legend
legend("bottomleft",legend=c("CTRL","DD","SCZ","DD+SCZ","CNCR"),cex=0.75,bg="white",
lwd=2,col=c("black","#55db74","#5ebded","#c470f4","#fc3737"))
dev.off()
#!/usr/bin/env R
#Copyright (c) 2016 Ryan Collins and Jake Conway
#Distributed under terms of the MIT License
#cleanManhattan: a dressed-up manhattan plot
cleanManhattan <- function (df,              #three-column data frame of chrom, pos, p-value
theme="green",   #select color theme (options: blue, green, red, orange, purple)
nominal=0.05,    #threshold for nominal significance
adjusted=1E-8    #threshold for adjusted significance (e.g. genome-wide)
){
#Set color theme vectors
if(theme=="green"){
colors <- c("#3a874c","#55db74","#f9ff54","#ff5a02")
}else if(theme=="blue"){
colors <- c("#44748c","#5ebded","#ffe502","#ff02e1")
}else if(theme=="red"){
colors <- c("#911212","#fc3737","#fff602","#021bff")
}else if(theme=="orange"){
colors <- c("#eda917","#f4db33","#1472e5","#d11ba9")
}else if(theme=="purple"){
colors <- c("#601d87","#c470f4","#42f1f4","#f9ea0e")
}
#Gather list of unique contigs
contigs <- unique(df[,1])
contigs <- contigs[which(!(is.na(contigs)))]
#Create index data frame
indexes <- as.data.frame(t(sapply(contigs,function(chr){
return(c(chr,0,max(df[which(df[,1]==chr),2])))
})))
indexes[,2] <- c(0,cumsum(indexes[,3]))[1:nrow(indexes)]
indexes$bg <- rep(colors[1:2],ceiling(nrow(indexes)/2))[1:nrow(indexes)]
#Create new plotting df with modified coordinates & color assignments
df.plot <- as.data.frame(t(apply(df,1,function(row){
return(c(row[1],
as.numeric(row[2]+indexes[as.numeric(row[1]),2]),
as.numeric(row[3]),
indexes[as.numeric(row[1]),4]))
})))
df.plot[,2] <- as.numeric(as.character(df.plot[,2]))
df.plot[,3] <- as.numeric(as.character(df.plot[,3]))
#Prepare plotting window
par(mar=c(2.1,3.1,0.6,0.6))
plot(x=range(indexes[,2]),y=c(0,1.1*max(-log10(df[,3]))),
type="n",xaxs="i",yaxs="i",xaxt="n",yaxt="n",xlab="",ylab="")
rect(xleft=rep(par("usr")[1],3),xright=rep(par("usr")[2],3),
ybottom=c(par("usr")[3],-log10(nominal),-log10(adjusted)),
ytop=c(-log10(nominal),-log10(adjusted),par("usr")[4]),
border=NA,col=c("gray60","gray80","gray95"))
abline(v=indexes[,2],col="gray90")
#Plots points & thresholds
points(df.plot[,2],-log10(df.plot[,3]),
cex=0.6,pch=21,lwd=0.01,bg=as.character(df.plot[,4]))
abline(h=-log10(c(nominal,adjusted)),col=colors[3:4])
#Adds axes & titles
axis(1,at=indexes[,2],labels=NA)
midpoints <- sapply(1:length(indexes[,2]),function(i){
return(mean(c(indexes[i,2],indexes[i,2]+indexes[i,3])))
})
axis(1,at=midpoints,labels=indexes[,1],tick=F,line=-1.25,cex.axis=0.4)
mtext(1,text="Chromosome",line=0.5)
y.at <- seq(0,ceiling(par("usr")[4]),by=ceiling(par("usr")[4]/6))
axis(2,at=y.at,labels=NA)
axis(2,at=y.at,tick=F,line=-0.3,labels=y.at,cex.axis=0.75,las=2)
mtext(2,text=expression(-log[10](italic(p))),line=1.5)
}
require(TBRden)
SCZ.del <- read.table("/Users/collins/Desktop/RCollins/HMS/Courses/HST508/HST508_FinalProject/BIN_CNV_burdens/SCZ_vs_CTRL/SCZ_vs_CTRL_DUP_noncoding.TBRden_results.bed.gz",header=T)
head(SCZ.del)
WRKDIR <- "/Users/collins/Desktop/RCollins/HMS/Courses/HST508/HST508_FinalProject"
WRKDIR <- "/Users/collins/Desktop/RCollins/HMS/Courses/HST508/HST508_FinalProject"
SCZ.del <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/SCZ_vs_CTRL/SCZ_vs_CTRL_DUP_noncoding.TBRden_results.bed.gz",header=T)
SCZ.del <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/SCZ_vs_CTRL/SCZ_vs_CTRL_DUP_noncoding.TBRden_results.bed.gz",header=T)[1,2,17]
WRKDIR <- "/Users/collins/Desktop/RCollins/HMS/Courses/HST508/HST508_FinalProject"
SCZ.del <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/SCZ_vs_CTRL/SCZ_vs_CTRL_DUP_noncoding.TBRden_results.bed.gz",sep=""),header=T)[1,2,17]
pdf(paste("~/scratch/","SCZ.del",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(SCZ.del,theme="blue",adjusted=0.05/8875)
dev.off()
head(SCZ.del)
SCZ.del <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/SCZ_vs_CTRL/SCZ_vs_CTRL_DUP_noncoding.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
dev.off()
SCZ.del <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/SCZ_vs_CTRL/SCZ_vs_CTRL_DUP_noncoding.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
dev.off()
dev.off()
dev.off()
dev.off()
pdf(paste("~/scratch/","SCZ.del",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(SCZ.del,theme="blue",adjusted=0.05/8875)
dev.off()
dev.off()
head(SCZ.del)
cleanManhattan(SCZ.del,theme="blue",adjusted=0.05/8875)
SCZ.del <- apply(SCZ.del[,1:3],2,as.numeric)
head(SCZ.del)
pdf(paste("~/scratch/","SCZ.del",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(SCZ.del,theme="blue",adjusted=0.05/8875)
dev.off()
WRKDIR <- "/Users/collins/Desktop/RCollins/HMS/Courses/HST508/HST508_FinalProject"
SCZ.del <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/SCZ_vs_CTRL/SCZ_vs_CTRL_DEL_noncoding.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
SCZ.del <- apply(SCZ.del[,1:3],2,as.numeric)
pdf(paste("~/scratch/","SCZ.del",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(SCZ.del,theme="blue",adjusted=0.05/8875)
dev.off()
SCZ.dup <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/SCZ_vs_CTRL/SCZ_vs_CTRL_DUP_noncoding.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
SCZ.dup <- apply(SCZ.del[,1:3],2,as.numeric)
pdf(paste("~/scratch/","SCZ.dup",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(SCZ.del,theme="blue",adjusted=0.05/8875)
dev.off()
DD_SCZ.del <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/DD_SCZ_vs_CTRL/DD_SCZ_vs_CTRL_DEL_noncoding.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
DD_SCZ.del <- apply(DD_SCZ.del[,1:3],2,as.numeric)
pdf(paste("~/scratch/","DD_SCZ.del",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(DD_SCZ.del,theme="blue",adjusted=0.05/8875)
DD_SCZ.del <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/DD_SCZ_vs_CTRL/DD_SCZ_vs_CTRL_DEL_noncoding.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
DD_SCZ.del <- apply(DD_SCZ.del[,1:3],2,as.numeric)
pdf(paste("~/scratch/","DD_SCZ.del",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(DD_SCZ.del,theme="purple",adjusted=0.05/8875)
dev.off()
DD_SCZ.dup <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/DD_SCZ_vs_CTRL/DD_SCZ_vs_CTRL_DUP_noncoding.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
DD_SCZ.dup <- apply(DD_SCZ.del[,1:3],2,as.numeric)
pdf(paste("~/scratch/","DD_SCZ.dup",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(DD_SCZ.del,theme="purple",adjusted=0.05/8875)
dev.off()
CNCR.del <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/CNCR_vs_CTRL/CNCR_vs_CTRL_DEL_noncoding.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
CNCR.del <- apply(CNCR.del[,1:3],2,as.numeric)
pdf(paste("~/scratch/","CNCR.del",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(CNCR.del,theme="red",adjusted=0.05/8875)
dev.off()
CNCR.dup <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/CNCR_vs_CTRL/CNCR_vs_CTRL_DUP_noncoding.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
CNCR.dup <- apply(CNCR.del[,1:3],2,as.numeric)
pdf(paste("~/scratch/","CNCR.dup",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(CNCR.del,theme="red",adjusted=0.05/8875)
dev.off()
WRKDIR <- "/Users/collins/Desktop/RCollins/HMS/Courses/HST508/HST508_FinalProject"
SCZ.del <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/SCZ_vs_CTRL/SCZ_vs_CTRL_DEL_noncoding.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
SCZ.del <- apply(SCZ.del[,1:3],2,as.numeric)
pdf(paste("~/scratch/","SCZ.del",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(SCZ.del,theme="blue",adjusted=0.05/8875)
dev.off()
SCZ.dup <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/SCZ_vs_CTRL/SCZ_vs_CTRL_DUP_noncoding.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
SCZ.dup <- apply(SCZ.dup[,1:3],2,as.numeric)
pdf(paste("~/scratch/","SCZ.dup",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(SCZ.dup,theme="blue",adjusted=0.05/8875)
dev.off()
DD_SCZ.del <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/DD_SCZ_vs_CTRL/DD_SCZ_vs_CTRL_DEL_noncoding.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
DD_SCZ.del <- apply(DD_SCZ.del[,1:3],2,as.numeric)
pdf(paste("~/scratch/","DD_SCZ.del",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(DD_SCZ.del,theme="purple",adjusted=0.05/8875)
dev.off()
DD_SCZ.dup <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/DD_SCZ_vs_CTRL/DD_SCZ_vs_CTRL_DUP_noncoding.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
DD_SCZ.dup <- apply(DD_SCZ.dup[,1:3],2,as.numeric)
pdf(paste("~/scratch/","DD_SCZ.dup",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(DD_SCZ.dup,theme="purple",adjusted=0.05/8875)
dev.off()
CNCR.del <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/CNCR_vs_CTRL/CNCR_vs_CTRL_DEL_noncoding.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
CNCR.del <- apply(CNCR.del[,1:3],2,as.numeric)
pdf(paste("~/scratch/","CNCR.del",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(CNCR.del,theme="red",adjusted=0.05/8875)
dev.off()
CNCR.dup <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/CNCR_vs_CTRL/CNCR_vs_CTRL_DUP_noncoding.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
CNCR.dup <- apply(CNCR.dup[,1:3],2,as.numeric)
pdf(paste("~/scratch/","CNCR.dup",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(CNCR.dup,theme="red",adjusted=0.05/8875)
dev.off()
SCZ.del <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/SCZ_vs_CTRL/SCZ_vs_CTRL_DEL_all.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
SCZ.del <- apply(SCZ.del[,1:3],2,as.numeric)
pdf(paste("~/scratch/","SCZ.del",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(SCZ.del,theme="blue",adjusted=0.05/8875)
dev.off()
SCZ.dup <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/SCZ_vs_CTRL/SCZ_vs_CTRL_DUP_all.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
SCZ.dup <- apply(SCZ.dup[,1:3],2,as.numeric)
pdf(paste("~/scratch/","SCZ.dup",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(SCZ.dup,theme="blue",adjusted=0.05/8875)
dev.off()
DD_SCZ.del <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/DD_SCZ_vs_CTRL/DD_SCZ_vs_CTRL_DEL_all.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
DD_SCZ.del <- apply(DD_SCZ.del[,1:3],2,as.numeric)
pdf(paste("~/scratch/","DD_SCZ.del",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(DD_SCZ.del,theme="purple",adjusted=0.05/8875)
dev.off()
DD_SCZ.dup <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/DD_SCZ_vs_CTRL/DD_SCZ_vs_CTRL_DUP_all.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
DD_SCZ.dup <- apply(DD_SCZ.dup[,1:3],2,as.numeric)
pdf(paste("~/scratch/","DD_SCZ.dup",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(DD_SCZ.dup,theme="purple",adjusted=0.05/8875)
dev.off()
CNCR.del <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/CNCR_vs_CTRL/CNCR_vs_CTRL_DEL_all.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
CNCR.del <- apply(CNCR.del[,1:3],2,as.numeric)
pdf(paste("~/scratch/","CNCR.del",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(CNCR.del,theme="red",adjusted=0.05/8875)
dev.off()
CNCR.dup <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/CNCR_vs_CTRL/CNCR_vs_CTRL_DUP_all.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
CNCR.dup <- apply(CNCR.dup[,1:3],2,as.numeric)
pdf(paste("~/scratch/","CNCR.dup",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(CNCR.dup,theme="red",adjusted=0.05/8875)
dev.off()
SCZ.dup <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/SCZ_vs_CTRL/SCZ_vs_CTRL_DUP_all.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
SCZ.dup <- apply(SCZ.dup[,1:3],2,as.numeric)
pdf(paste("~/scratch/","SCZ.dup",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(SCZ.dup,theme="blue",adjusted=0.05/8875)
dev.off()
DD_SCZ.del <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/DD_SCZ_vs_CTRL/DD_SCZ_vs_CTRL_DEL_all.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
DD_SCZ.del <- apply(DD_SCZ.del[,1:3],2,as.numeric)
pdf(paste("~/scratch/","DD_SCZ.del",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(DD_SCZ.del,theme="purple",adjusted=0.05/8875)
dev.off()
DD_SCZ.dup <- read.table(paste(WRKDIR,"/BIN_CNV_burdens/DD_SCZ_vs_CTRL/DD_SCZ_vs_CTRL_DUP_all.TBRden_results.bed.gz",sep=""),header=T)[,c(1,2,17)]
DD_SCZ.dup <- apply(DD_SCZ.dup[,1:3],2,as.numeric)
pdf(paste("~/scratch/","DD_SCZ.dup",".manhattan.pdf",sep=""),height=4,width=8)
cleanManhattan(DD_SCZ.dup,theme="purple",adjusted=0.05/8875)
dev.off()
#!/usr/bin/env R
#Code to plot number of CNVs reported per sample
WRKDIR <- "/Users/collins/Desktop/RCollins/HMS/Courses/HST508/HST508_FinalProject/HST508_FinalProject_Figures/"
#Load library
require(plotrix)
#Read data
x <- read.table(paste(WRKDIR,"CNVperSample_filtered.txt",sep=""),header=T)
?anova
head(x)
x
x$CNV.coding <- sum(x[,c(2,4)])
x$CNV.noncoding <- sum(x[,c(3,5)])
x
x$CNV.coding <- x[,2] + x[,4]
x$CNV.noncoding <- x[,3] + x[,5]
x
0.05/8875
#Set params
options(scipen=1000)
diseases <- c("DD","SCZ","DD_SCZ","CNCR")
CNVs <- c("CNV","DEL","DUP")
filts <- c("all","coding","noncoding")
#Read arguments
#first: input
#second: output
args <- c("/Users/collins/scratch/MASTER.p_values.all_bins.bed.gz","/Users/collins/scratch/MASTER.p_values.all_bins.wAnnotations.bed")
x <- read.table(args[1],comment.char="",header=T)
head(x)
i <-
i <- 1
vals <- x[i,-c(1:4)]
names(vals) <- colnames(x)[-c(1:4)]
vals
disease="DD_SCZ"
terms <- as.vector(sapply(CNVs,function(CNV){
unlist(sapply(filts,function(filt){
return(c(paste(disease,CNV,filt,"obs_p",sep="."),
paste(disease,CNV,filt,"perm_p",sep=".")))
}))
}))
terms
seq(2,18,2)
ANYp <- unlist(lapply(list(c(1,7,13),c(2,8,14),c(3,9,15),
c(4,10,16),c(5,11,17),c(6,12,18),
seq(1,17,2),seq(2,18,2)),
function(l){
d <- vals[which(names(vals) %in% terms[l])]
if(!(all(is.na(d)))){
return(min(d,na.rm=T))
}else{
return(NA)
}
}))
ANYp
CNV <- "DEL"
terms <- as.vector(unlist(sapply(filts,function(filt){
return(c(paste(CNV,filt,"obs_p",sep="."),
paste(CNV,filt,"perm_p",sep=".")))
})))
terms
terms.idx <- as.vector(sapply(terms,function(term){
grep(term,names(vals))
}))
grep
terms.idx
names(x)[terms.idx]
ANY.ANY.p <- unlist(lapply(list(1:4,5:8,9:12,13:16,17:20,21:24,
c(1:4,9:12,17:20),
c(5:8,13:16,21:24)),
function(l){
d <- vals[terms.idx[l]]
if(!(all(is.na(d)))){
return(min(d,na.rm=T))
}else{
return(NA)
}
}))
ANY.ANY.p
x <- read.table(args[1],comment.char="",header=T)
head(x)
head(x,20)
x[c(5,8),]
x[c(4,8),]
data.frame(c(0,1),c(6,152))
fisher.test(data.frame(c(0,1),c(6,152)),alternative="greater")
fisher.test(data.frame(c(0,1),c(6,152)),alternative="lessgreater")
fisher.test(data.frame(c(0,1),c(6,152)),alternative="less")
fisher.test(data.frame(c(0,1),c(6,152)))
head(x)
head(x[,c(1:20)],20)
i <- 1
vals <- x[i,-c(1:4)]
vals
fisher.test(data.frame(c(0,0),c(0,114)))
fisher.test(data.frame(c(0,0),c(0,114)),alternative="greater")
vals
fisher.test(data.frame(c(114,0),c(0,114)),alternative="greater")
fisher.test(data.frame(c(114,0),c(1,114)),alternative="greater")
10^-9
