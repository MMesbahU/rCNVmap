return(smooth.spline(jitter(c(rep(y,275),
seq(y,0.75,-0.25/75),
seq(0.75,0.25,-0.5/75),
seq(0.25,0,-0.25/75),
seq(0,0.25,0.25/75),
seq(0.25,0.75,0.5/75),
seq(0.75,y,0.25/75),
rep(y,275)),amount=0.3),spar=0.025))
}
#Function for "flat" data
flat <- function(y){
return(smooth.spline(jitter(rep(y,1000),amount=0.3),spar=0.025))
}
#Function for "right dip" data
flank.down <- function(y){
return(smooth.spline(jitter(c(rep(y,550),
seq(y,0.75,-0.25/75),
seq(0.75,0.25,-0.5/75),
seq(0.25,0,-0.25/75),
rep(0,275)),amount=0.3),spar=0.025))
}
#Function for "right rise" data
flank.up <- function(y){
return(smooth.spline(jitter(c(rep(y,550),
seq(y,1.25,0.25/75),
seq(1.25,1.75,0.5/75),
seq(1.75,2,0.25/75),
rep(2,275)),amount=0.3),spar=0.025))
}
#Prep plot
pdf(paste(WRKDIR,"rCNV_map_paper/Figures/Figure1/CNV_density_sims.pdf",sep=""),
height=1.3,width=6.8)
par(mfrow=c(1,5),mar=c(1.1,1.1,1.1,1.1))
#Case 1: case up, ctrl down
CNVsim(up(1.05),down(0.95),xlabel=T,ylabel=T)
mtext(3,text="1",cex=0.75)
#Case 2: case up, ctrl flat
CNVsim(up(1.05),flat(0.95),xlabel=T,ylabel=T)
mtext(3,text="2",cex=0.75)
#Case 3: case flat, ctrl down
CNVsim(flat(1.05),down(0.95),xlabel=T,ylabel=T)
mtext(3,text="3",cex=0.75)
#Case 4: case flank down, ctrl flat
CNVsim(flank.down(1.05),flat(0.95),xlabel=T,ylabel=T)
mtext(3,text="4",cex=0.75)
#Case 5: case flat, ctrl flank up
CNVsim(flat(1.05),flank.up(0.95),xlabel=T,ylabel=T)
mtext(3,text="5",cex=0.75)
dev.off()
#!/usr/bin/env Rscript
##############################
#    Rare CNV Map Project    #
##############################
# Copyright (c) 2016 Ryan L. Collins
# Distributed under terms of the MIT License (see LICENSE)
# Contact: Ryan L. Collins <rlcollins@g.harvard.edu>
# Code development credits availble on GitHub
#Code to draw simulated density profiles
#Set params
options(scipen=1000,stringsAsFactors=F)
WRKDIR <- "/Users/collins/Desktop/RCollins/Talkowski_Local/CNV_DB/rCNV_map/"
#Function to plot simulated data
CNVsim <- function(case,control,xlabel=F,ylabel=F,legend=F){
plot(x=c(0,1000),y=c(0,2),type="n",
xaxs="i",xlab="",xaxt="n",ylab="",yaxt="n")
rect(xleft=c(0,400),xright=c(600,1000),
ybottom=par("usr")[3],ytop=par("usr")[4],
col=adjustcolor("#EDE8D9",alpha=0.3),border=NA)
rect(xleft=400,xright=600,
ybottom=par("usr")[3],ytop=par("usr")[4],
col=adjustcolor("#5E522E",alpha=0.3))
abline(v=seq(0,1000,200),lty=2,col="gray80")
abline(h=1,lty=2,col="gray80")
points(case,type="l",lwd=1.5,col="red")
points(control,type="l",lwd=1.5,col="blue")
abline(v=c(400,600),lwd=1)
if(xlabel==T){
mtext(1,text="Coordinate",cex=0.75)
}
if(ylabel==T){
mtext(2,text="CNV Density",cex=0.75)
}
if(legend==T){
legend("topleft",legend=c("Case","Control"),
lwd=3,col=c("red","blue"),bty="n",cex=0.75)
}
rect(xleft=par("usr")[1],xright=par("usr")[2],
ybottom=par("usr")[3],ytop=par("usr")[4],col=NA)
}
#Function for "up" data
up <- function(y){
return(smooth.spline(jitter(c(rep(y,275),
seq(y,1.25,0.25/75),
seq(1.25,1.75,0.5/75),
seq(1.75,2,0.25/75),
seq(2,1.75,-0.25/75),
seq(1.75,1.25,-0.5/75),
seq(1.25,y,-0.25/75),
rep(y,275)),amount=0.3),spar=0.025))
}
#Function for "down" data
down <- function(y){
return(smooth.spline(jitter(c(rep(y,275),
seq(y,0.75,-0.25/75),
seq(0.75,0.25,-0.5/75),
seq(0.25,0,-0.25/75),
seq(0,0.25,0.25/75),
seq(0.25,0.75,0.5/75),
seq(0.75,y,0.25/75),
rep(y,275)),amount=0.3),spar=0.025))
}
#Function for "flat" data
flat <- function(y){
return(smooth.spline(jitter(rep(y,1000),amount=0.3),spar=0.025))
}
#Function for "right dip" data
flank.down <- function(y){
return(smooth.spline(jitter(c(rep(y,550),
seq(y,0.75,-0.25/75),
seq(0.75,0.25,-0.5/75),
seq(0.25,0,-0.25/75),
rep(0,275)),amount=0.3),spar=0.025))
}
#Function for "right rise" data
flank.up <- function(y){
return(smooth.spline(jitter(c(rep(y,550),
seq(y,1.25,0.25/75),
seq(1.25,1.75,0.5/75),
seq(1.75,2,0.25/75),
rep(2,275)),amount=0.3),spar=0.025))
}
#Prep plot
pdf(paste(WRKDIR,"rCNV_map_paper/Figures/Figure1/CNV_density_sims.pdf",sep=""),
height=1.3,width=6.8)
par(mfrow=c(1,5),mar=c(1.1,1.1,1.1,1.1))
#Case 1: case up, ctrl down
CNVsim(up(1.05),down(0.95),xlabel=T,ylabel=T)
mtext(3,text="1",cex=0.75)
#Case 2: case up, ctrl flat
CNVsim(up(1.05),flat(0.95),xlabel=T,ylabel=T)
mtext(3,text="2",cex=0.75)
#Case 3: case flat, ctrl down
CNVsim(flat(1.05),down(0.95),xlabel=T,ylabel=T)
mtext(3,text="3",cex=0.75)
#Case 4: case flank down, ctrl flat
CNVsim(flank.down(1.05),flat(0.95),xlabel=T,ylabel=T)
mtext(3,text="4",cex=0.75)
#Case 5: case flat, ctrl flank up
CNVsim(flat(1.05),flank.up(0.95),xlabel=T,ylabel=T)
mtext(3,text="5",cex=0.75)
dev.off()
#!/usr/bin/env Rscript
##############################
#    Rare CNV Map Project    #
##############################
# Copyright (c) 2016 Ryan L. Collins
# Distributed under terms of the MIT License (see LICENSE)
# Contact: Ryan L. Collins <rlcollins@g.harvard.edu>
# Code development credits availble on GitHub
#Code to draw simulated density profiles
#Set params
options(scipen=1000,stringsAsFactors=F)
WRKDIR <- "/Users/collins/Desktop/RCollins/Talkowski_Local/CNV_DB/rCNV_map/"
#Function to plot simulated data
CNVsim <- function(case,control,xlabel=F,ylabel=F,legend=F){
plot(x=c(0,1000),y=c(0,2),type="n",
xaxs="i",xlab="",xaxt="n",ylab="",yaxt="n")
rect(xleft=c(0,800),xright=c(200,1000),
ybottom=par("usr")[3],ytop=par("usr")[4],
col="gray98",border=NA)
rect(xleft=c(200,600),xright=c(400,800),
ybottom=par("usr")[3],ytop=par("usr")[4],
col=adjustcolor("#EDE8D9",alpha=0.3),border=NA)
rect(xleft=400,xright=600,
ybottom=par("usr")[3],ytop=par("usr")[4],
col=adjustcolor("#5E522E",alpha=0.3))
abline(v=seq(0,1000,200),lty=2,col="gray80")
abline(h=1,lty=2,col="gray80")
points(case,type="l",lwd=1.5,col="red")
points(control,type="l",lwd=1.5,col="blue")
abline(v=c(400,600),lwd=1)
if(xlabel==T){
mtext(1,text="Coordinate",cex=0.75)
}
if(ylabel==T){
mtext(2,text="CNV Density",cex=0.75)
}
if(legend==T){
legend("topleft",legend=c("Case","Control"),
lwd=3,col=c("red","blue"),bty="n",cex=0.75)
}
rect(xleft=par("usr")[1],xright=par("usr")[2],
ybottom=par("usr")[3],ytop=par("usr")[4],col=NA)
}
#Function for "up" data
up <- function(y){
return(smooth.spline(jitter(c(rep(y,275),
seq(y,1.25,0.25/75),
seq(1.25,1.75,0.5/75),
seq(1.75,2,0.25/75),
seq(2,1.75,-0.25/75),
seq(1.75,1.25,-0.5/75),
seq(1.25,y,-0.25/75),
rep(y,275)),amount=0.3),spar=0.025))
}
#Function for "down" data
down <- function(y){
return(smooth.spline(jitter(c(rep(y,275),
seq(y,0.75,-0.25/75),
seq(0.75,0.25,-0.5/75),
seq(0.25,0,-0.25/75),
seq(0,0.25,0.25/75),
seq(0.25,0.75,0.5/75),
seq(0.75,y,0.25/75),
rep(y,275)),amount=0.3),spar=0.025))
}
#Function for "flat" data
flat <- function(y){
return(smooth.spline(jitter(rep(y,1000),amount=0.3),spar=0.025))
}
#Function for "right dip" data
flank.down <- function(y){
return(smooth.spline(jitter(c(rep(y,550),
seq(y,0.75,-0.25/75),
seq(0.75,0.25,-0.5/75),
seq(0.25,0,-0.25/75),
rep(0,275)),amount=0.3),spar=0.025))
}
#Function for "right rise" data
flank.up <- function(y){
return(smooth.spline(jitter(c(rep(y,550),
seq(y,1.25,0.25/75),
seq(1.25,1.75,0.5/75),
seq(1.75,2,0.25/75),
rep(2,275)),amount=0.3),spar=0.025))
}
#Prep plot
pdf(paste(WRKDIR,"rCNV_map_paper/Figures/Figure1/CNV_density_sims.pdf",sep=""),
height=1.3,width=6.8)
par(mfrow=c(1,5),mar=c(1.1,1.1,1.1,1.1))
#Case 1: case up, ctrl down
CNVsim(up(1.05),down(0.95),xlabel=T,ylabel=T)
mtext(3,text="1",cex=0.75)
#Case 2: case up, ctrl flat
CNVsim(up(1.05),flat(0.95),xlabel=T,ylabel=T)
mtext(3,text="2",cex=0.75)
#Case 3: case flat, ctrl down
CNVsim(flat(1.05),down(0.95),xlabel=T,ylabel=T)
mtext(3,text="3",cex=0.75)
#Case 4: case flank down, ctrl flat
CNVsim(flank.down(1.05),flat(0.95),xlabel=T,ylabel=T)
mtext(3,text="4",cex=0.75)
#Case 5: case flat, ctrl flank up
CNVsim(flat(1.05),flank.up(0.95),xlabel=T,ylabel=T)
mtext(3,text="5",cex=0.75)
dev.off()
#!/usr/bin/env Rscript
##############################
#    Rare CNV Map Project    #
##############################
# Copyright (c) 2016 Ryan L. Collins
# Distributed under terms of the MIT License (see LICENSE)
# Contact: Ryan L. Collins <rlcollins@g.harvard.edu>
# Code development credits availble on GitHub
#Code to draw simulated density profiles
#Set params
options(scipen=1000,stringsAsFactors=F)
WRKDIR <- "/Users/collins/Desktop/RCollins/Talkowski_Local/CNV_DB/rCNV_map/"
#Function to plot simulated data
CNVsim <- function(case,control,xlabel=F,ylabel=F,legend=F){
plot(x=c(0,1000),y=c(0,2),type="n",
xaxs="i",xlab="",xaxt="n",ylab="",yaxt="n")
rect(xleft=c(0,800),xright=c(200,1000),
ybottom=par("usr")[3],ytop=par("usr")[4],
col="gray98",border=NA)
rect(xleft=c(200,600),xright=c(400,800),
ybottom=par("usr")[3],ytop=par("usr")[4],
col=adjustcolor("#EDE8D9",alpha=0.3),border=NA)
rect(xleft=400,xright=600,
ybottom=par("usr")[3],ytop=par("usr")[4],
col=adjustcolor("#5E522E",alpha=0.3))
abline(v=seq(0,1000,200),lty=2,col="gray80")
abline(h=1,lty=2,col="gray80")
points(case,type="l",lwd=1.5,col="#e06262")
points(control,type="l",lwd=1.5,col="#5abca2")
abline(v=c(400,600),lwd=1)
if(xlabel==T){
mtext(1,text="Coordinate",cex=0.75)
}
if(ylabel==T){
mtext(2,text="CNV Density",cex=0.75)
}
if(legend==T){
legend("topleft",legend=c("Case","Control"),
lwd=3,col=c("red","blue"),bty="n",cex=0.75)
}
rect(xleft=par("usr")[1],xright=par("usr")[2],
ybottom=par("usr")[3],ytop=par("usr")[4],col=NA)
}
#Function for "up" data
up <- function(y){
return(smooth.spline(jitter(c(rep(y,275),
seq(y,1.25,0.25/75),
seq(1.25,1.75,0.5/75),
seq(1.75,2,0.25/75),
seq(2,1.75,-0.25/75),
seq(1.75,1.25,-0.5/75),
seq(1.25,y,-0.25/75),
rep(y,275)),amount=0.3),spar=0.025))
}
#Function for "down" data
down <- function(y){
return(smooth.spline(jitter(c(rep(y,275),
seq(y,0.75,-0.25/75),
seq(0.75,0.25,-0.5/75),
seq(0.25,0,-0.25/75),
seq(0,0.25,0.25/75),
seq(0.25,0.75,0.5/75),
seq(0.75,y,0.25/75),
rep(y,275)),amount=0.3),spar=0.025))
}
#Function for "flat" data
flat <- function(y){
return(smooth.spline(jitter(rep(y,1000),amount=0.3),spar=0.025))
}
#Function for "right dip" data
flank.down <- function(y){
return(smooth.spline(jitter(c(rep(y,550),
seq(y,0.75,-0.25/75),
seq(0.75,0.25,-0.5/75),
seq(0.25,0,-0.25/75),
rep(0,275)),amount=0.3),spar=0.025))
}
#Function for "right rise" data
flank.up <- function(y){
return(smooth.spline(jitter(c(rep(y,550),
seq(y,1.25,0.25/75),
seq(1.25,1.75,0.5/75),
seq(1.75,2,0.25/75),
rep(2,275)),amount=0.3),spar=0.025))
}
#Prep plot
pdf(paste(WRKDIR,"rCNV_map_paper/Figures/Figure1/CNV_density_sims.pdf",sep=""),
height=1.3,width=6.8)
par(mfrow=c(1,5),mar=c(1.1,1.1,1.1,1.1))
#Case 1: case up, ctrl down
CNVsim(up(1.05),down(0.95),xlabel=T,ylabel=T)
mtext(3,text="1",cex=0.75)
#Case 2: case up, ctrl flat
CNVsim(up(1.05),flat(0.95),xlabel=T,ylabel=T)
mtext(3,text="2",cex=0.75)
#Case 3: case flat, ctrl down
CNVsim(flat(1.05),down(0.95),xlabel=T,ylabel=T)
mtext(3,text="3",cex=0.75)
#Case 4: case flank down, ctrl flat
CNVsim(flank.down(1.05),flat(0.95),xlabel=T,ylabel=T)
mtext(3,text="4",cex=0.75)
#Case 5: case flat, ctrl flank up
CNVsim(flat(1.05),flank.up(0.95),xlabel=T,ylabel=T)
mtext(3,text="5",cex=0.75)
dev.off()
#!/usr/bin/env Rscript
##############################
#    Rare CNV Map Project    #
##############################
# Copyright (c) 2016 Ryan L. Collins
# Distributed under terms of the MIT License (see LICENSE)
# Contact: Ryan L. Collins <rlcollins@g.harvard.edu>
# Code development credits availble on GitHub
#Code to draw simulated density profiles
#Set params
options(scipen=1000,stringsAsFactors=F)
WRKDIR <- "/Users/collins/Desktop/RCollins/Talkowski_Local/CNV_DB/rCNV_map/"
#Function to plot simulated data
CNVsim <- function(case,control,xlabel=F,ylabel=F,legend=F){
plot(x=c(0,1000),y=c(0,2),type="n",
xaxs="i",xlab="",xaxt="n",ylab="",yaxt="n")
rect(xleft=c(0,800),xright=c(200,1000),
ybottom=par("usr")[3],ytop=par("usr")[4],
col="gray98",border=NA)
rect(xleft=c(200,600),xright=c(400,800),
ybottom=par("usr")[3],ytop=par("usr")[4],
col=adjustcolor("#EDE8D9",alpha=0.3),border=NA)
rect(xleft=400,xright=600,
ybottom=par("usr")[3],ytop=par("usr")[4],
col=adjustcolor("#5E522E",alpha=0.3))
abline(v=seq(0,1000,200),lty=2,col="gray80")
abline(h=1,lty=2,col="gray80")
points(case,type="l",lwd=1.5,col="#fc6c6c")
points(control,type="l",lwd=1.5,col="#3e998b")
abline(v=c(400,600),lwd=1)
if(xlabel==T){
mtext(1,text="Coordinate",cex=0.75)
}
if(ylabel==T){
mtext(2,text="CNV Density",cex=0.75)
}
if(legend==T){
legend("topleft",legend=c("Case","Control"),
lwd=3,col=c("#fc6c6c","#3e998b"),bty="n",cex=0.75)
}
rect(xleft=par("usr")[1],xright=par("usr")[2],
ybottom=par("usr")[3],ytop=par("usr")[4],col=NA)
}
#Function for "up" data
up <- function(y){
return(smooth.spline(jitter(c(rep(y,275),
seq(y,1.25,0.25/75),
seq(1.25,1.75,0.5/75),
seq(1.75,2,0.25/75),
seq(2,1.75,-0.25/75),
seq(1.75,1.25,-0.5/75),
seq(1.25,y,-0.25/75),
rep(y,275)),amount=0.3),spar=0.025))
}
#Function for "down" data
down <- function(y){
return(smooth.spline(jitter(c(rep(y,275),
seq(y,0.75,-0.25/75),
seq(0.75,0.25,-0.5/75),
seq(0.25,0,-0.25/75),
seq(0,0.25,0.25/75),
seq(0.25,0.75,0.5/75),
seq(0.75,y,0.25/75),
rep(y,275)),amount=0.3),spar=0.025))
}
#Function for "flat" data
flat <- function(y){
return(smooth.spline(jitter(rep(y,1000),amount=0.3),spar=0.025))
}
#Function for "right dip" data
flank.down <- function(y){
return(smooth.spline(jitter(c(rep(y,550),
seq(y,0.75,-0.25/75),
seq(0.75,0.25,-0.5/75),
seq(0.25,0,-0.25/75),
rep(0,275)),amount=0.3),spar=0.025))
}
#Function for "right rise" data
flank.up <- function(y){
return(smooth.spline(jitter(c(rep(y,550),
seq(y,1.25,0.25/75),
seq(1.25,1.75,0.5/75),
seq(1.75,2,0.25/75),
rep(2,275)),amount=0.3),spar=0.025))
}
#Prep plot
pdf(paste(WRKDIR,"rCNV_map_paper/Figures/Figure1/CNV_density_sims.pdf",sep=""),
height=1.3,width=6.8)
par(mfrow=c(1,5),mar=c(1.1,1.1,1.1,1.1))
#Case 1: case up, ctrl down
CNVsim(up(1.05),down(0.95),xlabel=T,ylabel=T)
mtext(3,text="1",cex=0.75)
#Case 2: case up, ctrl flat
CNVsim(up(1.05),flat(0.95),xlabel=T,ylabel=T)
mtext(3,text="2",cex=0.75)
#Case 3: case flat, ctrl down
CNVsim(flat(1.05),down(0.95),xlabel=T,ylabel=T)
mtext(3,text="3",cex=0.75)
#Case 4: case flank down, ctrl flat
CNVsim(flank.down(1.05),flat(0.95),xlabel=T,ylabel=T)
mtext(3,text="4",cex=0.75)
#Case 5: case flat, ctrl flank up
CNVsim(flat(1.05),flank.up(0.95),xlabel=T,ylabel=T)
mtext(3,text="5",cex=0.75)
dev.off()
args <- c("/Users/collins/scratch/MASTER.p_values.all_bins.annotated.bed.gz")
df <- read.table(args$args[1],comment.char="",header=T)
df <- read.table(args[1],comment.char="",header=T)
head(df)
names(df)
terms <- c("DD.ANY_CNV.ANY_FILTER.perm_p","CNCR.ANY_CNV.ANY_FILTER.perm_p")
options(scipen=1000,stringsAsFactors=F)
diseases <- c("DD","SCZ","DD_SCZ","CNCR","ANY_DISEASE")
CNVs <- c("CNV","DEL","DUP","ANY_CNV")
filts <- c("all","coding","noncoding","ANY_FILTER")
actions <- c("include","exclude")
#Load requirements
require("optparse")
action="include"
#Sanity check action
if(!(action %in% actions)){
stop("Argument 'action' must be either 'include' or 'exclude'")
}
terms
which(names(df) %in% terms)
cidx <- which(names(df) %in% terms)
cidx <- which(names(df) %in% terms)
if(length(cidx)==0){
stop("No column headers match your specified terms. Please check your input terms list.")
}
names(df)[cidx]
df[which(df[,cidx]<=0.05),]
df[which(df[,cidx]<=0.05),cidx]
lapply(cidx,function(i){
return(which(df[,i] <= 0.05 & !(is.na(df[,i])))
})
lapply(cidx,function(i){
return(which(df[,i] <= 0.05 & !(is.na(df[,i]))))
})
pass <- lapply(cidx,function(i){
return(which(df[,i] <= 0.05 & !(is.na(df[,i]))))
})
intersect(pass)
pass[[-1]]
union <- intersect(pass[[1]],pass[[2]])
union
df[union,cidx]
df[union,c(1:20,cidx)]
library(TBRden)
library(TBRden)
library(TBRden)
